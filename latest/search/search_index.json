{
    "docs": [
        {
            "location": "/", 
            "text": "Persa.jl\n\n\nPersa\n \u00e9 um pacote para\n\n\n\n\nPackage Features\n\n\n\n\nSupports Julia \n0.7\n and \n1.0\n.\n\n\n\n\n\n\nGoal\n\n\nThe main aim is to create a framework that facilitates the study of collaborative filtering in Julia. Collaborative filtering frameworks basically are library with set of prediction and recommendation algorithms. Most don't provide tools that facilitate the construction of new algorithms. In some cases they provide, they don't use some scientific computation language and this making development more difficult.\n\n\nIn this scenario Persa will provide a set of tools that will facilitate the development of collaborative filtering algorithms. It will extend the Julia language by building a specific domain language (DSL) and thus increasing the productivity of development. The developer will not worry about data access and the construction of the main tasks.\n\n\n\n\nCollaborative Filtering\n\n\nCollaborative filtering is one of the most successful approaches to Recommendation Systems. The purpose of this approach is to use user ratings to suggest some item that the user has not consumed and should like. This approach can be represented by a matrix where the content of it is the evaluation performed by the user on an item. However, this matrix is not necessarily complete since the user didn't necessarily consume all items.\n\n\n\n\n\n\n\n\n_\n\n\nItem #1\n\n\nItem #2\n\n\nItem #3\n\n\n\n\n\n\n\n\n\n\nUser #1\n\n\n4\n\n\n\n\n2\n\n\n\n\n\n\nUser #2\n\n\n4\n\n\n5\n\n\n3\n\n\n\n\n\n\nUser #3\n\n\n3\n\n\n4\n\n\n\n\n\n\n\n\nUser #4\n\n\n\n\n5\n\n\n4\n\n\n\n\n\n\n\n\nPersa can be divided into large two parts: data access and predictive model\n\n\n\n\nData\n\n\nThe \nPersa.Preference\n represents all possibilities of ratings within a system. It is used to validate a rating. We can define that in this system the ratings are defined as integers of [1,5]:\n\n\njulia\n preference = Persa.Preference([1, 2, 3, 4, 5])\nRatings Preference: [1, 2, 3, 4, 5]\n\n\n\n\nSo, we can represent a rating as:\n\n\njulia\n Persa.Rating(1, preference)\nRating: 1\n\n\n\n\nThe action of a user evaluating an item is represented by the \nPersa.UserPreference\n structure. Using the matrix as an example we have:\n\n\njulia\n x = Persa.UserPreference(1, 1, Persa.Rating(1, preference))\n(user: 1, item: 1, rating: 1)\n\n\n\n\nIn this way, we can create the above matrix.\n\n\njulia\n data\n9-element Array{Persa.UserPreference{Int64},1}:\n (user: 1, item: 1, rating: 4)\n (user: 1, item: 3, rating: 2)\n (user: 2, item: 1, rating: 4)\n (user: 2, item: 2, rating: 5)\n (user: 2, item: 3, rating: 3)\n (user: 3, item: 1, rating: 3)\n (user: 3, item: 2, rating: 4)\n (user: 4, item: 2, rating: 5)\n (user: 3, item: 3, rating: 4)\n\n\n\n\nThe \nPersa.Dataset\n structure is the representation of the user-item matrix.\n\n\njulia\n dataset = Persa.Dataset(data, 4, 3, preference)\nCollaborative Filtering Dataset\n- # users: 4\n- # items: 3\n- # ratings: 9\n- Ratings Preference: [1, 2, 3, 4, 5]\n\n\n\n\nIt is possible to access the data through linear indexing or by the user and item indices.\n\n\nIn the case of linear the related \nPersa.UserPreference\n will be returned.\n\n\njulia\n dataset[1]\n(user: 1, item: 1, rating: 4)\n\n\n\n\nAlready using the index through the user and item will be returning the rating.\n\n\njulia\n dataset[1,1]\nRating: 4\n\n\n\n\n\n\nModel\n\n\nPersa has a second important abstraction. It interprets the predictive model as an access to the user-item matrix. The access to the data and the predictions become the same. In this way, the access to the information is standardized.\n\n\nThe model will be a structure that will be of the \nPersa.Model\n type. This structure will need to have the information of the set of preferences and the amount of users and items.\n\n\nmutable struct RandomModel \n: Persa.Model\n    preference::Persa.Preference\n    users::Int\n    items::Int\nend\n\nRandomModel(dataset::Persa.Dataset) = RandomModel(dataset.preference, Persa.users(dataset), Persa.items(dataset))\n\n\n\n\nFinally, it will be necessary to construct a forecasting method using this model.\n\n\nPersa.predict(model::RandomModel, user::Int, item::Int) = rand(model.preference.possibles)\n\n\n\n\nThe Persa has several abstractions that facilitate the use of the forecast. It will follow the same logic that was made for the dataset.\n\n\njulia\n model = RandomModel(ds)\nRandomModel(Ratings Preference: [1, 2, 3, 4, 5], 4, 3)\n\njulia\n model[1,1]\nRating: 2 (2)", 
            "title": "Home"
        }, 
        {
            "location": "/#persajl", 
            "text": "Persa  \u00e9 um pacote para", 
            "title": "Persa.jl"
        }, 
        {
            "location": "/#package-features", 
            "text": "Supports Julia  0.7  and  1.0 .", 
            "title": "Package Features"
        }, 
        {
            "location": "/#goal", 
            "text": "The main aim is to create a framework that facilitates the study of collaborative filtering in Julia. Collaborative filtering frameworks basically are library with set of prediction and recommendation algorithms. Most don't provide tools that facilitate the construction of new algorithms. In some cases they provide, they don't use some scientific computation language and this making development more difficult.  In this scenario Persa will provide a set of tools that will facilitate the development of collaborative filtering algorithms. It will extend the Julia language by building a specific domain language (DSL) and thus increasing the productivity of development. The developer will not worry about data access and the construction of the main tasks.", 
            "title": "Goal"
        }, 
        {
            "location": "/#collaborative-filtering", 
            "text": "Collaborative filtering is one of the most successful approaches to Recommendation Systems. The purpose of this approach is to use user ratings to suggest some item that the user has not consumed and should like. This approach can be represented by a matrix where the content of it is the evaluation performed by the user on an item. However, this matrix is not necessarily complete since the user didn't necessarily consume all items.     _  Item #1  Item #2  Item #3      User #1  4   2    User #2  4  5  3    User #3  3  4     User #4   5  4     Persa can be divided into large two parts: data access and predictive model", 
            "title": "Collaborative Filtering"
        }, 
        {
            "location": "/#data", 
            "text": "The  Persa.Preference  represents all possibilities of ratings within a system. It is used to validate a rating. We can define that in this system the ratings are defined as integers of [1,5]:  julia  preference = Persa.Preference([1, 2, 3, 4, 5])\nRatings Preference: [1, 2, 3, 4, 5]  So, we can represent a rating as:  julia  Persa.Rating(1, preference)\nRating: 1  The action of a user evaluating an item is represented by the  Persa.UserPreference  structure. Using the matrix as an example we have:  julia  x = Persa.UserPreference(1, 1, Persa.Rating(1, preference))\n(user: 1, item: 1, rating: 1)  In this way, we can create the above matrix.  julia  data\n9-element Array{Persa.UserPreference{Int64},1}:\n (user: 1, item: 1, rating: 4)\n (user: 1, item: 3, rating: 2)\n (user: 2, item: 1, rating: 4)\n (user: 2, item: 2, rating: 5)\n (user: 2, item: 3, rating: 3)\n (user: 3, item: 1, rating: 3)\n (user: 3, item: 2, rating: 4)\n (user: 4, item: 2, rating: 5)\n (user: 3, item: 3, rating: 4)  The  Persa.Dataset  structure is the representation of the user-item matrix.  julia  dataset = Persa.Dataset(data, 4, 3, preference)\nCollaborative Filtering Dataset\n- # users: 4\n- # items: 3\n- # ratings: 9\n- Ratings Preference: [1, 2, 3, 4, 5]  It is possible to access the data through linear indexing or by the user and item indices.  In the case of linear the related  Persa.UserPreference  will be returned.  julia  dataset[1]\n(user: 1, item: 1, rating: 4)  Already using the index through the user and item will be returning the rating.  julia  dataset[1,1]\nRating: 4", 
            "title": "Data"
        }, 
        {
            "location": "/#model", 
            "text": "Persa has a second important abstraction. It interprets the predictive model as an access to the user-item matrix. The access to the data and the predictions become the same. In this way, the access to the information is standardized.  The model will be a structure that will be of the  Persa.Model  type. This structure will need to have the information of the set of preferences and the amount of users and items.  mutable struct RandomModel  : Persa.Model\n    preference::Persa.Preference\n    users::Int\n    items::Int\nend\n\nRandomModel(dataset::Persa.Dataset) = RandomModel(dataset.preference, Persa.users(dataset), Persa.items(dataset))  Finally, it will be necessary to construct a forecasting method using this model.  Persa.predict(model::RandomModel, user::Int, item::Int) = rand(model.preference.possibles)  The Persa has several abstractions that facilitate the use of the forecast. It will follow the same logic that was made for the dataset.  julia  model = RandomModel(ds)\nRandomModel(Ratings Preference: [1, 2, 3, 4, 5], 4, 3)\n\njulia  model[1,1]\nRating: 2 (2)", 
            "title": "Model"
        }, 
        {
            "location": "/man/getting_started/", 
            "text": "Getting Started\n\n\n\n\nBasic Usage\n\n\n\n\nRandom Predict Model\n\n\nusing Persa\nusing DatasetsCF\n\ndataset = DatasetsCF.MovieLens()\n\n\n\n\n\n\n\n\n\n\nFirst Header\n\n\nSecond Header\n\n\nThird Header\n\n\n\n\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell", 
            "title": "Getting Started"
        }, 
        {
            "location": "/man/getting_started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/man/getting_started/#basic-usage", 
            "text": "", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/man/getting_started/#random-predict-model", 
            "text": "using Persa\nusing DatasetsCF\n\ndataset = DatasetsCF.MovieLens()     First Header  Second Header  Third Header      Content Cell  Content Cell  Content Cell    Content Cell  Content Cell  Content Cell", 
            "title": "Random Predict Model"
        }
    ]
}